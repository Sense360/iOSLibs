// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SenseQuinoaLib
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import Compression
import CoreData
import CoreLocation
import CoreMotion
import Foundation
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
public class JWTEncoder : SenseQuinoaLib.BodyEncoder {
  public init(jwtSigner: SenseQuinoaLib.JWTSigner)
  public init(keyIDToSigner: @escaping (Swift.String) -> SenseQuinoaLib.JWTSigner?)
  public func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
  public func encodeToString<T>(_ value: T) throws -> Swift.String where T : Swift.Encodable
  @objc deinit
}
@available(iOS 9.0, *)
extension Data {
  public func compress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public func decompress(withAlgorithm algo: Foundation.Data.CompressionAlgorithm) -> Foundation.Data?
  public enum CompressionAlgorithm {
    case zlib
    case lzfse
    case lzma
    case lz4
    public static func == (a: Foundation.Data.CompressionAlgorithm, b: Foundation.Data.CompressionAlgorithm) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public func deflate() -> Foundation.Data?
  public func inflate() -> Foundation.Data?
  public func zip() -> Foundation.Data?
  public func unzip(skipCheckSumValidation: Swift.Bool = true) -> Foundation.Data?
  public func gzip() -> Foundation.Data?
  public func gunzip() -> Foundation.Data?
  public func adler32() -> SenseQuinoaLib.Adler32
  public func crc32() -> SenseQuinoaLib.Crc32
}
public struct Crc32 : Swift.CustomStringConvertible {
  public init()
  public var checksum: Swift.UInt32
  mutating public func advance(withChunk chunk: Foundation.Data)
  public var description: Swift.String {
    get
  }
}
public struct Adler32 : Swift.CustomStringConvertible {
  public init()
  public var checksum: Swift.UInt32
  mutating public func advance(withChunk chunk: Foundation.Data)
  public var description: Swift.String {
    get
  }
}
public let ErrorDomain: Swift.String
public let ErrorUnsupportedType: Swift.Int
public let ErrorIndexOutOfBounds: Swift.Int
public let ErrorWrongType: Swift.Int
public let ErrorNotExist: Swift.Int
public let ErrorInvalidJSON: Swift.Int
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = .allowFragments, error: Foundation.NSErrorPointer = nil)
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  @available(*, deprecated, message: "Use instead `init(parseJSON: )`")
  public static func parse(_ json: Swift.String) -> SenseQuinoaLib.JSON
  mutating public func merge(with other: SenseQuinoaLib.JSON) throws
  public func merged(with other: SenseQuinoaLib.JSON) throws -> SenseQuinoaLib.JSON
  public var object: Any {
    get
    set
  }
  public var error: Foundation.NSError? {
    get
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: SenseQuinoaLib.JSON {
    get
  }
  public static var null: SenseQuinoaLib.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: SenseQuinoaLib.Index<T>, rhs: SenseQuinoaLib.Index<T>) -> Swift.Bool
  public static func < (lhs: SenseQuinoaLib.Index<T>, rhs: SenseQuinoaLib.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = SenseQuinoaLib.Index<SenseQuinoaLib.JSON>
public typealias JSONRawIndex = SenseQuinoaLib.Index<Any>
extension JSON : Swift.Collection {
  public typealias Index = SenseQuinoaLib.JSONRawIndex
  public var startIndex: SenseQuinoaLib.JSON.Index {
    get
  }
  public var endIndex: SenseQuinoaLib.JSON.Index {
    get
  }
  public func index(after i: SenseQuinoaLib.JSON.Index) -> SenseQuinoaLib.JSON.Index
  public subscript(position: SenseQuinoaLib.JSON.Index) -> (Swift.String, SenseQuinoaLib.JSON) {
    get
  }
  public typealias Element = (Swift.String, SenseQuinoaLib.JSON)
  public typealias Iterator = Swift.IndexingIterator<SenseQuinoaLib.JSON>
  public typealias SubSequence = Swift.Slice<SenseQuinoaLib.JSON>
  public typealias Indices = Swift.DefaultIndices<SenseQuinoaLib.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: SenseQuinoaLib.JSONKey { get }
}
extension Int : SenseQuinoaLib.JSONSubscriptType {
  public var jsonKey: SenseQuinoaLib.JSONKey {
    get
  }
}
extension String : SenseQuinoaLib.JSONSubscriptType {
  public var jsonKey: SenseQuinoaLib.JSONKey {
    get
  }
}
extension JSON {
  public subscript(path: [SenseQuinoaLib.JSONSubscriptType]) -> SenseQuinoaLib.JSON {
    get
    set
  }
  public subscript(path: SenseQuinoaLib.JSONSubscriptType...) -> SenseQuinoaLib.JSON {
    get
    set
  }
}
extension JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension JSON : Swift.ExpressibleByNilLiteral {
  @available(*, deprecated, message: "use JSON.null instead. Will be removed in future versions")
  public init(nilLiteral: ())
}
extension JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [SenseQuinoaLib.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension JSON {
  public var array: [SenseQuinoaLib.JSON]? {
    get
  }
  public var arrayValue: [SenseQuinoaLib.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension JSON {
  public var dictionary: [Swift.String : SenseQuinoaLib.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : SenseQuinoaLib.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension JSON : Swift.Comparable {
}
public func == (lhs: SenseQuinoaLib.JSON, rhs: SenseQuinoaLib.JSON) -> Swift.Bool
public func <= (lhs: SenseQuinoaLib.JSON, rhs: SenseQuinoaLib.JSON) -> Swift.Bool
public func >= (lhs: SenseQuinoaLib.JSON, rhs: SenseQuinoaLib.JSON) -> Swift.Bool
public func > (lhs: SenseQuinoaLib.JSON, rhs: SenseQuinoaLib.JSON) -> Swift.Bool
public func < (lhs: SenseQuinoaLib.JSON, rhs: SenseQuinoaLib.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: SenseQuinoaLib.writingOptionsKeys, b: SenseQuinoaLib.writingOptionsKeys) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol Claims : Swift.Decodable, Swift.Encodable {
  var exp: Foundation.Date? { get }
  var nbf: Foundation.Date? { get }
  var iat: Foundation.Date? { get }
  func encode() throws -> Swift.String
}
extension Claims {
  public var exp: Foundation.Date? {
    get
  }
  public var nbf: Foundation.Date? {
    get
  }
  public var iat: Foundation.Date? {
    get
  }
  public func encode() throws -> Swift.String
}
public enum Status : CommonCrypto.CCCryptorStatus, Swift.Error, Swift.CustomStringConvertible {
  case success
  case paramError
  case bufferTooSmall
  case memoryFailure
  case alignmentError
  case decodeError
  case unimplemented
  case overflow
  case rngFailure
  public func toRaw() -> CommonCrypto.CCCryptorStatus
  public var description: Swift.String {
    get
  }
  public static func fromRaw(status: CommonCrypto.CCCryptorStatus) -> SenseQuinoaLib.Status?
  public typealias RawValue = CommonCrypto.CCCryptorStatus
  public init?(rawValue: CommonCrypto.CCCryptorStatus)
  public var rawValue: CommonCrypto.CCCryptorStatus {
    get
  }
}
public enum CryptorError : Swift.Error, Swift.CustomStringConvertible {
  case success
  case invalidKeySize
  case invalidIVSizeOrLength
  case fail(Swift.Int32, Swift.String)
  public var errCode: Swift.Int32 {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc open class Sense360Testing : ObjectiveC.NSObject {
  @objc public static func verifyDataCollection()
  @objc public static func triggerSurveyNotification() throws
  @objc override dynamic public init()
  @objc deinit
}
extension JWTEncoder {
  public static func base64urlEncodedString(data: Foundation.Data) -> Swift.String
}
public struct JWTSigner {
  public static func hs256(key: Foundation.Data) -> SenseQuinoaLib.JWTSigner
}
@objc final public class DemographicData : ObjectiveC.NSObject {
  @objc public init(gender: Swift.String, age: Swift.Int, maritalStatus: Swift.String, income: Swift.Int, ethnicity: Swift.String, birthYear: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
public protocol Updatable {
  var status: SenseQuinoaLib.Status { get }
  func update(from buffer: Swift.UnsafeRawPointer, byteCount: Darwin.size_t) -> Self?
}
extension Updatable {
  public func update(data: Foundation.NSData) -> Self?
  public func update(data: Foundation.Data) -> Self?
  public func update(byteArray: [Swift.UInt8]) -> Self?
  public func update(string: Swift.String) -> Self?
}
public class HMAC : SenseQuinoaLib.Updatable {
  public enum Algorithm {
    case md5
    case sha1
    case sha224
    case sha256
    case sha384
    case sha512
    public func digestLength() -> Swift.Int
    public static func == (a: SenseQuinoaLib.HMAC.Algorithm, b: SenseQuinoaLib.HMAC.Algorithm) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var status: SenseQuinoaLib.Status {
    get
    }
  public init(using algorithm: SenseQuinoaLib.HMAC.Algorithm, key: Foundation.Data)
  public init(using algorithm: SenseQuinoaLib.HMAC.Algorithm, key: Foundation.NSData)
  public init(using algorithm: SenseQuinoaLib.HMAC.Algorithm, key: [Swift.UInt8])
  public init(using algorithm: SenseQuinoaLib.HMAC.Algorithm, key: Swift.String)
  @objc deinit
  public func update(from buffer: Swift.UnsafeRawPointer, byteCount: Darwin.size_t) -> Self?
  public func final() -> [Swift.UInt8]
}
@objc open class Sense360 : ObjectiveC.NSObject {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  @objc public static var userId: Swift.String {
    @objc get
  }
  @objc public static var sdkStarted: Swift.Bool {
    @objc get
  }
  @objc(startWithNotificationDelegate:sendNotifications:) public static func start(_ notificationDelegate: SenseQuinoaLib.SenseNotificationDelegate? = SenseNotificationDelegate?.none, sendNotifications: Swift.Bool) -> SenseQuinoaLib.SDKStartResult
  @objc(restoreWithNotificationDelegate:sendNotifications:) public static func restore(_ notificationDelegate: SenseQuinoaLib.SenseNotificationDelegate? = SenseNotificationDelegate?.none, sendNotifications: Swift.Bool) -> SenseQuinoaLib.SDKStartResult
  @objc public static func disableSurveyNotifications()
  @objc public static func enableSurveyNotifications()
  @objc public static func areSurveyNotificationsEnabled() -> Swift.Bool
  @objc public static func stop()
  @objc public static func userNotificationCenterDidReceive(center: UserNotifications.UNUserNotificationCenter, didReceive: UserNotifications.UNNotificationResponse, withCompletionHandler: () -> Swift.Void) -> Swift.Bool
  @objc public static func userNotificationCenterWillPresent(center: UserNotifications.UNUserNotificationCenter, willPresent: UserNotifications.UNNotification, withCompletionHandler: (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void) -> Swift.Bool
  @objc public static func passDemographicData(_ data: SenseQuinoaLib.DemographicData)
  @objc public static func passThirdPartyUserId(_ thirdPartyUseId: Swift.String) throws
  @objc(userOptInWithNotificationDelegate:sendNotifications:) public static func userOptIn(_ notificationDelegate: SenseQuinoaLib.SenseNotificationDelegate? = SenseNotificationDelegate?.none, sendNotifications: Swift.Bool) -> SenseQuinoaLib.SDKStartResult
  @objc public static func userOptOut()
  @objc public static func isUserOptedOut() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public typealias UploadDelegate = (SenseQuinoaLib.UploadEventArgs) -> ()
open class UploadEventArgs {
  final public let filesUploaded: [Swift.String]
  final public let totalFileSize: Swift.Double
  final public let success: Swift.Bool
  @objc deinit
}
@objc public enum SDKStartResult : Swift.Int {
  case success = 0
  case alreadyStarted
  case unknownFailure
  case userOptedOut
  case noUserId
  case sdkNotActive
  case sdkIsStopped
  case notRestored
  case permanentlyStopped
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct JWTError : Swift.Error, Swift.Equatable {
  public let localizedDescription: Swift.String
  public static let invalidJWTString: SenseQuinoaLib.JWTError
  public static let osVersionToLow: SenseQuinoaLib.JWTError
  public static let invalidPrivateKey: SenseQuinoaLib.JWTError
  public static let invalidUTF8Data: SenseQuinoaLib.JWTError
  public static let invalidKeyID: SenseQuinoaLib.JWTError
  public static func == (lhs: SenseQuinoaLib.JWTError, rhs: SenseQuinoaLib.JWTError) -> Swift.Bool
  public static func ~= (lhs: SenseQuinoaLib.JWTError, rhs: Swift.Error) -> Swift.Bool
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
public class S360Reachability {
  public typealias NetworkReachable = (SenseQuinoaLib.S360Reachability) -> ()
  public typealias NetworkUnreachable = (SenseQuinoaLib.S360Reachability) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: SenseQuinoaLib.S360Reachability.NetworkStatus, b: SenseQuinoaLib.S360Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: SenseQuinoaLib.S360Reachability.NetworkReachable?
  public var whenUnreachable: SenseQuinoaLib.S360Reachability.NetworkUnreachable?
  public var reachableOnWWAN: Swift.Bool
  public var currentReachabilityString: Swift.String {
    get
  }
  public var currentReachabilityStatus: SenseQuinoaLib.S360Reachability.NetworkStatus {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension S360Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc public protocol SenseNotificationDelegate {
  @objc func notificationClicked(clickData: SenseQuinoaLib.NotificationClickData)
  @objc func notificationSent()
  @objc func notificationsWillBeRemoved()
}
@objc public class NotificationClickData : ObjectiveC.NSObject {
  @objc final public let url: Foundation.URL
  @objc final public let surveyId: Swift.String
  @objc public init(url: Foundation.URL, surveyId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public struct Header : Swift.Codable {
  public var typ: Swift.String?
  public var alg: Swift.String? {
    get
    }
  public var jku: Swift.String?
  public var jwk: Swift.String?
  public var kid: Swift.String?
  public var x5u: Swift.String?
  public var x5c: [Swift.String]?
  public var x5t: Swift.String?
  public var x5tS256: Swift.String?
  public var cty: Swift.String?
  public var crit: [Swift.String]?
  public init(typ: Swift.String? = "JWT", jku: Swift.String? = nil, jwk: Swift.String? = nil, kid: Swift.String? = nil, x5u: Swift.String? = nil, x5c: [Swift.String]? = nil, x5t: Swift.String? = nil, x5tS256: Swift.String? = nil, cty: Swift.String? = nil, crit: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct JWT<T> : Swift.Codable where T : SenseQuinoaLib.Claims {
  public var header: SenseQuinoaLib.Header
  public var claims: T
  public init(header: SenseQuinoaLib.Header = Header(), claims: T)
  mutating public func sign(using jwtSigner: SenseQuinoaLib.JWTSigner) throws -> Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol BodyEncoder : AnyObject {
  func encode<T>(_ value: T) throws -> Foundation.Data where T : Swift.Encodable
}
extension JSONEncoder : SenseQuinoaLib.BodyEncoder {
}
@available(iOS 9.0, *)
extension Foundation.Data.CompressionAlgorithm : Swift.Equatable {}
@available(iOS 9.0, *)
extension Foundation.Data.CompressionAlgorithm : Swift.Hashable {}
extension SenseQuinoaLib.writingOptionsKeys : Swift.Equatable {}
extension SenseQuinoaLib.writingOptionsKeys : Swift.Hashable {}
extension SenseQuinoaLib.Status : Swift.Equatable {}
extension SenseQuinoaLib.Status : Swift.Hashable {}
extension SenseQuinoaLib.Status : Swift.RawRepresentable {}
extension SenseQuinoaLib.HMAC.Algorithm : Swift.Equatable {}
extension SenseQuinoaLib.HMAC.Algorithm : Swift.Hashable {}
extension SenseQuinoaLib.SDKStartResult : Swift.Hashable {}
extension SenseQuinoaLib.SDKStartResult : Swift.RawRepresentable {}
extension SenseQuinoaLib.S360Reachability.NetworkStatus : Swift.Equatable {}
extension SenseQuinoaLib.S360Reachability.NetworkStatus : Swift.Hashable {}
